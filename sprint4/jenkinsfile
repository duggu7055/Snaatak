@Library('React_SCA_Library') _
node {
    // Define pipeline parameters
    env.GIT_BRANCH = 'main'
    env.GIT_REPO_URL = 'https://github.com/snaatak-Downtime-Crew/frontend-api.git'
    env.GIT_CREDS_ID = 'yuvraj-git'
    env.SONAR_CRED_ID = 'durgesh-sonar'
    env.SONAR_PROJECT_KEY = 'ReactSCA-Project'
    env.SONAR_SOURCES = 'src'
    env.SONAR_SCANNER_PATH = '/opt/sonar-scanner/bin/sonar-scanner'
    env.LCOV_PATH = 'coverage/lcov.info'
    env.SLACK_CHANNEL = 'react-notifications'
    env.SLACK_CRED_ID = 'downtime-crew'
    env.EMAIL_TO = 'ds705589@gmail.com'
    

    // Generate report links dynamically
    def reportLinks = [
        [name: 'SonarQube Report', url: "${env.SONAR_SCANNER_PATH}/report.html"],
        [name: 'Coverage Report', url: "${env.BUILD_URL}/artifact/coverage/index.html"]
    ]

    // Call the shared library's main function
    def reactSCA = new org.downtimecrew.template.reactSCA.reactSCA()
    reactSCA.call([
        gitBranch: env.GIT_BRANCH,
        gitRepoUrl: env.GIT_REPO_URL,
        gitCredsId: env.GIT_CREDS_ID,
        sonarCredsId: env.SONAR_CRED_ID,
        sonarProjectKey: env.SONAR_PROJECT_KEY,
        sonarSources: env.SONAR_SOURCES,
        sonarScannerPath: env.SONAR_SCANNER_PATH,
        lcovPath: env.LCOV_PATH,
        slackChannel: env.SLACK_CHANNEL,
        slackCredId: env.SLACK_CRED_ID,
        emailTo: env.EMAIL_TO,
        reportLinks: reportLinks // Add report links here
    ])
}
