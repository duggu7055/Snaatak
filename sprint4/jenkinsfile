@Library('React_SCA_Library') _
pipeline {
    agent any
    parameters {
        string(name: 'URL', defaultValue: 'https://github.com/snaatak-Downtime-Crew/frontend-api.git', description: 'Git Repository URL')
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to build')
        string(name: 'PROJECT_KEY', defaultValue: 'ReactSCA-Project', description: 'SonarQube Project Key')
        string(name: 'SONAR_URL', defaultValue: 'http://192.168.10.184:9000', description: 'SonarQube Server URL')
        string(name: 'SONAR_SOURCES', defaultValue: 'src', description: 'Path to Source Code for Analysis')
        string(name: 'SONAR_TOKEN', defaultValue: 'durgesh-sonar', description: 'SonarQube Authentication Token')
    }
    environment {
        CREDS_ID = 'yuvraj-git'
    }
    steps {
        script {
            // Stage: Workspace Cleanup
            stage('Workspace Cleanup') {
                def wsClean = new org.downtimecrew.common.wsClean()
                wsClean.call()
            }
            
            // Stage: Git Checkout
            stage('Git Checkout') {
                def gitCheckOut = new org.downtimecrew.common.gitCheckOut()
                gitCheckOut.call(params.BRANCH, params.URL, env.CREDS_ID)
            }
            
            // Stage: Install Dependencies
            stage('Install Dependencies') {
                def installDependencies = new org.downtimecrew.reactSCA.installDependencies()
                installDependencies.call()
            }
            
            // Stage: Run SonarQube Analysis
            stage('SonarQube Analysis') {
                def runSonarQubeAnalysis = new org.downtimecrew.reactSCA.runSonarQubeAnalysis()
                runSonarQubeAnalysis.call(
                    params.PROJECT_KEY,
                    params.SONAR_URL,
                    params.SONAR_SOURCES,
                    params.SONAR_TOKEN
                )
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
